{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/scripts/actions/cards.js","src/scripts/app.js","src/scripts/calculator/calculator.js","src/scripts/calculator/diceparser.js","src/scripts/calculator/parser.js","src/scripts/calculator/roller.js","src/scripts/calculator/shuntingyard.js","src/scripts/components/App.js","src/scripts/components/cards/Card.js","src/scripts/components/cards/card-stack.js","src/scripts/components/pages/list.js","src/scripts/middleware/index.js","src/scripts/middleware/logger.js","src/scripts/middleware/task.js","src/scripts/middleware/validator.js","src/scripts/reducers/app.js","src/scripts/reducers/index.js","src/scripts/reducers/list.js","src/scripts/store/index.js","src/scripts/utils/either.js","src/scripts/utils/logging.js","src/scripts/utils/stack.js","src/scripts/utils/task.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import {\n    createAction\n} from '../store'\n\nexport const cardCalculated = createAction((id) => {\n    return {\n        type: 'CALCULATE_CARD',\n        id\n    }\n})","import {h, render} from 'preact'\nimport {App} from './components/App'\nimport {createStore} from './store'\nimport {combinedReducer} from './reducers'\nimport {combinedMiddleware} from './middleware'\n\nconst container = document.getElementById('app')\n\nconst initState = {\n    app: {\n        message: ''\n    },\n    list: {\n        cards: [\n            {id: 1, text: '10d6>3 + 3', isOpen: false},\n            {id: 2, text: '5d4kh2 - 2', isOpen: false},\n            {id: 3, text: '2d20 + 12 + 2', isOpen: false},\n            {id: 4, text: '1d20 - 3', isOpen: false},\n            {id: 5, text: '2d8 + 9', isOpen: false},\n            {id: 6, text: '2d20>5 + 4', isOpen: false}\n        ]\n    }\n}\n\ncreateStore(initState, combinedReducer, combinedMiddleware).subscribe(state => {\n    console.log('render')\n    render(<App {...state} />, container, container.lastChild)\n})","const {\n    shunt,\n    matchBrackets,\n    checkExpression\n} = require('./shuntingyard')\n\nconst {\n    calculate,\n    rollDice\n} = require('./roller')\n\nconst {\n    map,\n    chain,\n    get\n} = require('../utils/either')\n\nconst {\n    compose\n} = require('ramda')\n\nconst {\n    parse,\n    fold\n} = require('./parser')\n\nconst {\n    expression\n} = require('./diceparser')\n\nconst {\n    log\n} = require('../utils/logging')\n\nconst calculateDice = (dicetext) => {\n    const result = compose(get, map(calculate), chain(checkExpression), map(shunt), chain(matchBrackets), map(rollDice), fold, parse(expression))(dicetext)\n\n    return result\n}\n\nmodule.exports = {\n    calculateDice\n}","const {\n    many,\n    many1,\n    sequence,\n    any,\n    choice,\n    str,\n    regex,\n    map,\n    between,\n    opt,\n    end,\n    andThen,\n    setLabel,\n    skip\n} = require('./parser')\n\nconst {\n    compose,\n    merge\n} = require('ramda')\n\nconst {\n    log\n} = require('../utils/logging')\n\nconst projectDie = (die) => ({\n    type: 'die',\n    number: Number(die[0]),\n    diceType: die[2],\n    modifiers: die[3]\n})\n\nconst projectNumber = (num) => ({\n    type: 'number',\n    number: Number(num)\n})\n\nconst operators = {\n    '^': {\n        precedence: 4,\n        associativity: \"right\",\n        arity: 2\n    },\n    '/': {\n        precedence: 3,\n        associativity: \"left\",\n        arity: 2\n    },\n    '*': {\n        precedence: 3,\n        associativity: \"left\",\n        arity: 2\n    },\n    '+': {\n        precedence: 2,\n        associativity: \"left\",\n        arity: 2\n    },\n    '-': {\n        precedence: 2,\n        associativity: \"left\",\n        arity: 2\n    }\n}\n\nconst projectOperator = (op) => merge({\n    type: 'operator',\n    operation: op\n}, operators[op])\n\nconst projectBracket = (br) => ({\n    type: 'bracket',\n    bracket: br\n})\n\nconst projectWhitespace = (ws) => ({\n    type: 'whitespace',\n    whitespace: ws\n})\n\nconst digit = regex(/[0-9]/, 'digit')\nconst digits = regex(/[0-9]+/, 'digits')\nconst whitespace = regex(/\\s+/, 'whitespace')\n\nconst betweenWhitespace = (parser) => between(opt(whitespace), parser, opt(whitespace))\n\nconst keep = sequence([choice([str('kh'), str('kl'), str('k')]), digits])\n\nconst drop = sequence([choice([str('dh'), str('dl'), str('d')]), digits])\n\nconst success = sequence([choice([str('<='), str('>='), str('<'), str('>'), str('=')]), digits])\n\nconst reroll = sequence([choice([str('ro'), str('r')]), opt(choice([str('<='), str('>='), str('<'), str('>')])), opt(digits)])\n\nconst modifier = choice([keep, drop, success, reroll])\n\nconst die = compose(setLabel('die'), map(projectDie), log, betweenWhitespace, sequence)([digits, str('d'), choice([str('f'), digits]), many(modifier)])\n\nconst num = compose(setLabel('number'), map(projectNumber), betweenWhitespace)(digits)\n\nconst operator = compose(setLabel('operator'), map(projectOperator), betweenWhitespace, choice)([str('+'), str('-'), str('*'), str('/'), str('^')])\n\nconst bracket = compose(setLabel('bracket'), map(projectBracket), betweenWhitespace, choice)([str('('), str(')')])\n\nconst expression = compose(many, choice)([die, num, operator, bracket])\n\nmodule.exports = {\n    expression\n}","const {\n    flip,\n    reduce,\n    flatten,\n    head,\n    tail,\n    prepend,\n    isEmpty,\n    curry,\n    compose,\n    apply,\n    repeat,\n    map: listMap,\n    contains,\n    join\n} = require('ramda')\n\nconst {\n    Left,\n    Right\n} = require('../utils/either')\n\n//PARSER TYPE\nconst _Parser = function (action, label) {\n    this.action = action\n    this.label = label\n}\n\nconst Parser = (action, label) => new _Parser(action, label)\n\n//RESULT TYPES\nconst _Success = function (value, remaining) {\n    this.value = value\n    this.remaining = remaining\n}\n\nconst Success = (value, remaining) => new _Success(value, remaining)\n\nconst _Failure = function (message, label) {\n    this.message = message\n    this.label = label\n}\n\nconst Failure = (message, label) => new _Failure(message, label)\n\n//HELPERS\nconst isParser = (parser) => parser instanceof _Parser\n\nconst isSuccess = (result) => result instanceof _Success\n\nconst isFailure = (result) => result instanceof _Failure\n\nconst parse = curry((parser, input) => parser.action(input))\n\nconst fold = (result) => (isSuccess(result) === true) ? (result.remaining === '' ? Right(result.value) : Left('Input remaining')) : Left(`${result.message}. Expected ${result.label}.` )\n\n//COMBINATORS\nconst of = (value) => Parser((input) => Success(value, input))\n\nconst fail = (message, label) => Parser((input) => Failure(message, label))\n\nconst orElse = curry((parser1, parser2) => Parser((input) => {\n    const result = parser1.action(input)\n\n    if (isSuccess(result) === true) {\n        return result\n    } else {\n        return parser2.action(input)\n    }\n}, `${getLabel(parser1)} orElse ${getLabel(parser2)}`))\n\nconst andThen = curry((parser1, parser2) => Parser((input) => {\n    const result1 = parser1.action(input)\n\n    if (isSuccess(result1) === true) {\n        const result2 = parser2.action(result1.remaining)\n        if (isSuccess(result2) === true) {\n            return Success([result1.value, result2.value], result2.remaining)\n        } else {\n            return result2\n        }\n    } else {\n        return result1\n    }\n}, `${getLabel(parser1)} andThen ${getLabel(parser2)}`))\n\nconst choice = (parsers) => reduce(orElse, head(parsers))(tail(parsers))\n\nconst map = curry((f, parser) => Parser((input) => {\n    const result = parser.action(input)\n\n    if (isSuccess(result) === true) {\n        return Success(f(result.value), result.remaining)\n    } else {\n        return result\n    }\n}))\n\nconst ap = curry((fP, xP) => compose(map(([f, x]) => f(x)), andThen)(fP, xP))\n\nconst apRev = flip(ap)\n\nconst lift2 = curry((f, xP, yP) => compose(apRev(yP), apRev(xP), of)(f))\n\nconst chain = curry((f, parser) => Parser((input) => {\n    const result = parser.action(input)\n\n    if (isSuccess(result) === true) {\n        const nextParser = f(result.value)\n        return nextParser.action(result.remaining)\n    } else {\n        return result\n    }\n}))\n\nconst consP = lift2(prepend)\n\nconst sequence = (parsers) => {\n    if (isEmpty(parsers) === true){\n        return of([])\n    } else {\n        return consP(head(parsers), sequence(tail(parsers)))\n    }\n}\n\nconst sequenceMap = curry((maps, parsers) => compose(map(apply(maps)), sequence)(parsers))\n\nconst zeroOrMore = (parser, input) => {\n    const result = parser.action(input)\n    if (isSuccess(result) === true) {\n        const nextResult = zeroOrMore(parser, result.remaining)\n        return Success(prepend(result.value, nextResult.value), nextResult.remaining)\n    } else {\n        return Success([], input)\n    }\n}\n\nconst many = (parser) => Parser((input) => zeroOrMore(parser, input), `many ${getLabel(parser)}`)\n\nconst many1 = (parser) => Parser((input) => {\n    const result = parser.action(input)\n    if (isSuccess(result) === true) {\n        return zeroOrMore(parser, input)\n    } else {\n        return result\n    }\n}, `many1 ${getLabel(parser)}`)\n\nconst skip = (parser1, parser2) => sequenceMap((x, y) => y, [parser1, parser2])\n\nconst skipRight = (parser1, parser2) => sequenceMap((x, y) => x, [parser1, parser2])\n\nconst skipMany = () => {}\n\nconst between = (parser1, parser2, parser3) => sequenceMap((x, y, z) => y, [parser1, parser2, parser3])\n\nconst sepBy1 = (match, sep) => map(flatten)(andThen(match, many(skip(sep, match))))\n\nconst sepBy = (match, sep) => Parser((input) => {\n    const result = sepBy1(match, sep).action(input)\n\n    if (isSuccess(result) === true) {\n        return result\n    } else {\n        return Success([], result.remaining)\n    }\n}, sep)\n\nconst times = (min, max, parser) => Parser((input) => {\n    let times = 0\n    let values = []\n    let result\n    let remaining = input\n\n    while (times < max) {\n        result = parser.action(remaining)\n\n        if (isSuccess(result) === true) {\n            values = prepend(result.value, values)\n            remaining = result.remaining\n            times += 1\n        } else if (times >= min) {\n            break\n        } else {\n            return result\n        }\n    }\n\n    return Success(values, remaining)\n})\n\nconst atMost = (upperlimit, parser) => times(0, upperlimit, parser)\n\nconst atLeast = (lowerlimit, parser) => times(lowerlimit, Infinity, parser)\n\nconst opt = (parser) => times(0, 1, parser)\n\nconst lazy = (f) => {\n    const parser = Parser((input) => {\n        parser.action = f().action\n        return parser.action(input)\n    })\n\n    return parser\n}\n\nconst getLabel = (parser) => parser.label\n\nconst setLabel = curry((label, parser) => Parser((input) => {\n    const result = parser.action(input)\n\n    if (isSuccess(result) === true){\n        return result\n    } else {\n        return Failure(result.message, label)\n    }\n}, label))\n\n//PARSERS\nconst str = (str) => Parser((input) => {\n    const test = input.slice(0, str.length)\n\n    if (test === str) {\n        return Success(str, input.substr(str.length))\n    } else {\n        return Failure('Unexpected ' + test, str)\n    }\n}, str)\n\nconst regex = (regexp, label) => Parser((input) => {\n    const match = input.match(regexp)\n\n    if (match !== null && (match[0] === input.substr(0, match[0].length))) {\n        return Success(match[0], input.substr(match[0].length))\n    } else {\n        return Failure('Unexpected string from ' + regexp.source, label)\n    }\n}, label)\n\nconst satisfy = (pred, label) => Parser((input) => {\n    const test = input.charAt(0)\n\n    if (pred(test) === true) {\n        return Success(test, input.substr(1))\n    } else {\n        return Failure('Unexpected ' + test, label)\n    }\n})\n\nconst anyOf = (chars) => compose(choice, setLabel('any of'), listMap(str))(chars)\n\nconst noneOf = (chars) => Parser((input) => {\n\n    const test = input.charAt(0)\n\n    if (!contains(test, chars)){\n        return Success(test, input.substr(1))\n    } else {\n        return Failure('Unexpected ' + test, `one of ${join(',', chars)}`)\n    }\n})\n\nconst end = Parser((input) => (input === '') ? Success('', '') : Failure('Unexpected ' + input, 'end of input'))\n\nconst all = Parser((input) => Success(input, ''))\n\nconst any = Parser((input) => Success(input.charAt(0), input.substr(1)))\n\nconst lookAhead = (str) => Parser((input) => {\n    const test = input.slice(0, str.length)\n\n    if (test === str) {\n        return Success('', input)\n    } else {\n        return Failure('Unexpected ' + text, str)\n    }\n})\n\nconst lookAheadP = (parser) => Parser((input) => {\n    const result = parser.action(input)\n\n    if (isSuccess(result) === true){\n        return Success('', input)\n    } else {\n        return Failure('Unexpected failure of lookahead', getLabel(parser))\n    }\n})\n\nconst lookAheadRegEx = (regex, label) => {\n const match = input.match(regexp)\n\n    if (match !== null && (match[0] === input.substr(0, match[0].length))) {\n        return Success('', input)\n    } else {\n        return Failure('Unexpected string from ' + regex.toString(), label)\n    }\n}\n\nmodule.exports = {\n    str,\n    regex,\n    satisfy,\n    anyOf,\n    noneOf,\n    end,\n    all,\n    any,\n    of,\n    fail,\n    orElse,\n    andThen,\n    choice,\n    sequence,\n    sequenceMap,\n    opt,\n    between,\n    sepBy,\n    sepBy1,\n    times,\n    atMost,\n    atLeast,\n    map,\n    many,\n    many1,\n    lazy,\n    skip,\n    skipRight,\n    skipMany,\n    lookAhead,\n    lookAheadP,\n    lookAheadRegEx,\n    ap,\n    lift2,\n    chain,\n    parse,\n    fold,\n    getLabel,\n    setLabel,\n    isParser,\n    isSuccess,\n    isFailure\n}","const Stack = require('../utils/stack')\n\nconst {\n    compose,\n    reduce,\n    unfold,\n    merge,\n    map,\n    curry,\n    join\n} = require('ramda')\n\nconst {\n    Left,\n    Right\n} = require('../utils/either')\n\nconst {\n    log\n} = require('../utils/logging')\n\nconst add = (a, b) => a + b\nconst subtract = (a, b) => a - b\nconst multiply = (a, b) => a * b\nconst divide = (a, b) => a / b\nconst power = (a, b) => Math.pow(a, b)\n\nconst combineTopTwo = (combiner, stack) => {\n    const fst = Stack.peek(stack)\n    stack = Stack.pop(stack)\n    const snd = Stack.peek(stack)\n    stack = Stack.pop(stack)\n\n    return Stack.push(combiner(snd, fst), stack)\n}\n\nconst randomFromRange = (min, max) => min + Math.floor(Math.random() * (max - min))\n\nconst calculateStep = (stack, step) => {\n    switch (step.type) {\n        case 'die':\n            return Stack.push(step.total, stack)\n        case 'number':\n            return Stack.push(step.number, stack)\n\n        case 'operator':\n            switch (step.operation) {\n                case '+':\n                    return combineTopTwo(add, stack)\n                case '-':\n                    return combineTopTwo(subtract, stack)\n                case '*':\n                    return combineTopTwo(multiply, stack)\n                case '/':\n                    return combineTopTwo(divide, stack)\n                case '^':\n                    return combineTopTwo(power, stack)\n            }\n    }\n}\n\n//calculate :: Array -> Number\nconst calculate = compose(Stack.peek, reduce(calculateStep, Stack.empty()))\n\n//produceRoll :: Object -> Number -> (Boolean || [Number, Number])\nconst produceRoll = step => n => n > step.number ? false : [randomFromRange(1, step.diceType), n + 1];\n\n//rollDie :: Object -> Object\nconst rollDie = (step) => {\n\n    if (step.type === 'die'){\n        console.log(step)\n        //TODO: modifiers\n        const values = unfold(produceRoll(step), 1)\n\n        return merge(step, {\n            values,\n            total: reduce(add, 0, values)\n        })\n    } else {\n        return step\n    }\n}\n\n//rollDice :: Array -> Array\nconst rollDice = map(rollDie)\n\n//pad :: String -> String -> String -> String\nconst pad = (str, padstart, padend) => padstart + str + (padend || padstart)\n\n//printStep :: String -> Object -> String\nconst printStep = (state, step) => {\n    switch (step.type){\n        case 'die':\n            return state + pad(join(' + ', step.values), ' [ ', ' ] ')\n        case 'number':\n            return state + pad(step.number, ' ')\n        case 'operator':\n            return state + pad(step.operation, ' ')\n        case 'bracket':\n            return state + pad(step.bracket, ' ')\n        default:\n            return state\n    }\n}\n\n//print :: Array => String\nconst print = reduce(printStep, '')\n\nmodule.exports = {\n    calculate,\n    rollDice,\n    print\n}","const Stack = require('../utils/stack')\n\nconst {\n    map,\n    reduce,\n    reduced,\n    compose,\n    curry,\n    prop,\n    append\n} = require('ramda')\n\nconst {\n    Left,\n    Right\n} = require('../utils/either')\n\nconst removeOperators = (pred, output, operators) => {\n    while (pred(operators)) {\n        output = append(Stack.peek(operators), output)\n        operators = Stack.pop(operators)\n    }\n\n    return {\n        output,\n        operators\n    }\n}\n\nconst testPrecedence = curry((op, operators) => (op.associativity === 'left' && op.precedence <= Stack.peek(operators).precedence) || (op.precedence < Stack.peek(operators).precedence))\n\nconst notOpeningBracket = (operators) => Stack.peek(operators).bracket !== '('\n\nconst notEmpty = (operators) => Stack.isEmpty(operators) === false\n\nconst shunter = ({\n    output,\n    operators\n}, token) => {\n    if (token.type === 'number' || token.type === 'die') {\n        return {\n            output: append(token, output),\n            operators\n        }\n    } else if (token.type === 'operator') {\n        const state = removeOperators(testPrecedence(token), output, operators)\n        return {\n            output: state.output,\n            operators: Stack.push(token, state.operators)\n        }\n\n    } else if (token.type === 'bracket') {\n        if (token.bracket === '(') {\n            return {\n                output: output,\n                operators: Stack.push(token, operators)\n            }\n        } else if (token.bracket === ')') {\n            const state = removeOperators(notOpeningBracket, output, operators)\n            return {\n                output: state.output,\n                operators: Stack.pop(state.operators)\n            }\n        }\n    }\n}\n\nconst shuntState = {\n    output: [],\n    operators: Stack.empty()\n}\n\nconst appendRemaining = ({\n    output,\n    operators\n}) => removeOperators(notEmpty, output, operators)\n\n//shunt :: Array -> Queue\nconst shunt = (tokens) => compose(prop('output'), appendRemaining, reduce(shunter, shuntState))(tokens)\n\n//decrementCounter :: Integer -> Integer -> Integer\nconst decrementCounter = (counter, by) => {\n    counter = counter - by\n\n    if (counter < 0) {\n        return reduced(counter)\n    } else {\n        return counter + 1\n    }\n}\n\n//checkStep :: Integer -> Object -> Integer\nconst checkStep = (counter, step) => {\n    switch (step.type) {\n        case 'die':\n        case 'number':\n            return counter + 1\n        case 'operator':\n            if (step.arity === 2) {\n                return decrementCounter(counter, 2)\n            } else if (step.arity === 1) {\n                return decrementCounter(counter, 1)\n            }\n    }\n}\n\n//checkExpression :: Array -> Either Array String\nconst checkExpression = (steps) => reduce(checkStep, 0, steps) === 1 ? Right(steps) : Left('Invalid Expression')\n\n//countBracket :: Object -> Object\nconst countBracket = (state, step) => ({\n    open: state.open + ((step.type === 'bracket' && step.bracket === '(') ? 1 : 0),\n    close: state.close + ((step.type === 'bracket' && step.bracket === ')') ? 1 : 0),\n})\n\n//hasEqualBrackets:: Object -> Boolean\nconst hasEqualBrackets = (brackets) => (brackets.open === brackets.close)\n\n//matchBrackets :: Array -> Either Array String\nconst matchBrackets = (steps) => compose(hasEqualBrackets, reduce(countBracket, {\n    open: 0,\n    close: 0\n}))(steps) ? Right(steps) : Left('Brackets don\\'t match')\n\nmodule.exports = {\n    shunt,\n    checkExpression,\n    matchBrackets\n}","import {h} from 'preact'\nimport {ListPage} from './pages/list'\n\nexport const App = (state) => (\n    <div>\n       <ListPage cards={state.list.cards}/>\n    </div>\n)","import {h} from 'preact'\nimport {cardCalculated} from '../../actions/cards'\n\nconst cardClicked = (card) => (e) => {\n    console.log(e)\n     cardCalculated(card.id)\n}\n\nexport const Card = ({card}) => (\n    <div className='card-stack--card'>\n        <div className='card-stack--card-details' onClick={cardClicked(card)}>\n            <div className='card-stack--card-text'>{card.text}</div>\n            <div className='card-stack--card-result'>{card.result}</div>\n        </div>\n    </div>\n)","import {h} from 'preact'\nimport {Card} from './Card'\nimport {map} from 'ramda'\n\nconst createCard = (card) => <Card card={card} />\n\nexport const CardStack = ({cards}) => (\n    <div className='card-stack'>\n        {map(createCard)(cards)}\n    </div>\n)\n","import {h} from 'preact'\nimport {CardStack} from '../cards/card-stack'\n\nexport const ListPage = ({cards}) => {\n    return (\n    <CardStack cards={cards}/>\n)\n}","import {combineMiddleware} from '../store'\n\nimport logger from './logger'\nimport validator from './validator'\nimport task from './task'\n\nexport const combinedMiddleware = combineMiddleware([\n    logger,\n    validator,\n    task\n])","import {Observable} from 'rxjs'\n\nconst logger = action => {\n    console.log(action)\n    return Observable.of(action)\n}\n\nexport default logger","import {\n    Observable\n} from 'rxjs'\n\nimport {\n    fork\n} from '../utils/task'\n\nconst task = action => {\n    const {\n        task\n    } = action\n\n    if (task === undefined) {\n        return Observable.of(action)\n    }\n\n    const {\n        computation,\n        computing,\n        success,\n        failure\n    } = task\n\n    const taskRunner = Observable.create(observer => {\n\n        observer.next(computing())\n\n        fork((error) => {\n            observer.next(failure(error))\n            observer.complete()\n        }, (data) => {\n            observer.next(success(data))\n            observer.complete()\n        }, computation)\n    })\n\n    return taskRunner\n}\n\nexport default task","import {Observable} from 'rxjs'\nimport {compose, map, toPairs, fromPairs, pick, keys, reject, isNil} from 'ramda'\n\nconst validator = action => {\n  const { validate } = action\n\n  if (validate === undefined){\n    return Observable.of(action)\n  }\n\n  const { rules, data = {}, success, failure, reset } = validate\n\n  const apply = (rules) => ([key, value]) => {\n      let messages = compose(reject(isNil), map((rule) => (rule.validator(value) === false) ? rule.message : undefined))(rules[key])\n      return messages.length > 0 ? [key + 'Errors', messages] : undefined\n  }\n\n  const errors = compose(fromPairs, reject(isNil), map(apply(rules)), toPairs, pick(keys(rules)))(data)\n\n  if (Object.keys(errors).length === 0){\n    return Observable.merge(Observable.of(reset(data)), Observable.of(success(data)))\n  } else {\n    return Observable.of(failure(data, errors))\n  }\n}\n\nexport default validator","export default (state, action) => {\n  switch (action.type) {\n    case 'SEND_MESSAGE_APP_SUCCESS':\n      return {\n        ...state,\n        message: action.data\n      }\n\n      case 'SEND_MESSAGE_APP_FAILURE':\n      return {\n        ...state,\n        message: action.errors.titleErrors[0]\n      }\n\n    default:\n      return state;\n  }\n}","import {combineReducers} from '../store'\nimport app from './app'\nimport list from './list'\n\nexport const combinedReducer = combineReducers({\n  app,\n  list\n})","import {map, merge} from 'ramda'\nimport {calculateDice} from '../calculator/calculator'\n\nconst calculateCard = (id) => (card) => (id === card.id) ? merge(card, {result: calculateDice(card.text)}) : card\n\nexport default (state, action) => {\n  switch (action.type) {\n    case 'CALCULATE_CARD':\n      return merge(state, {\n        cards: map(calculateCard(action.id))(state.cards)\n      })\n\n    default:\n      return state;\n  }\n}","import {Observable, Subject} from 'rxjs'\nimport {mapObjIndexed, map, compose} from 'ramda'\n\nconst action$ = new Subject()\n\nexport const isObservable = (obj) =>  obj instanceof Observable\n\nexport const createStore = (initstate, reducers, middlewares) => action$.startWith(initstate).scan(reducers)\n\nexport const createAction = (func) => (...args) => {\n  const action = func(...args)\n  action$.next(action)\n\n  return action\n}\n\nconst updateState = (reducers, action) => (state, key) => reducers[key](state, action)\n\nexport const combineReducers = (reducers) => (state, action) => mapObjIndexed(updateState(reducers, action), state)\n\nexport const combineMiddleware = (middlewares) => (action) => Observable.merge(...map(middleware => middleware(action))(middlewares))\n","const _Left = function (a) {\n    this.value = a\n}\n\nconst Left = (a) => new _Left(a)\n\nconst _Right = function (a) {\n    this.value = a\n}\n\nconst Right = (a) => new _Right(a)\n\n\nconst isLeft = (either) => either instanceof _Left\n\nconst isRight = (either) => either instanceof _Right\n\nconst fromNullable = (a) => a !== null ? Right(a) : Left(a)\n\nconst of = (a) => Right(a)\n\nconst ap = (b) => (either) => isLeft(either) ? either : map(b, either.value)\n\nconst map = (f) => (either) => of(f(either.value))\n\nconst chain = (f) => (either) => isLeft(either) ? () => {} : f(either.value)\n\nconst get = (either) => isRight(either) ? either.value : undefined\n\nconst getOrElse = (value) => (either) => isRight(either) ? either.value : value\n\nconst merge = (either) => either.value\n\nconst fold = (f, g) => (either) => isRight(either) ? g(either.value) : f(either.value)\n\nmodule.exports = {\n    Left,\n    Right,\n    isLeft,\n    isRight,\n    fromNullable,\n    of,\n    map,\n    chain,\n    get,\n    getOrElse,\n    merge,\n    fold\n}","export const log = (item) => {\n    console.log(item)\n    return item\n}","const _Stack = function(item, stack) {\n    this.head = item\n    this.tail = stack\n}\n\nconst _Empty = function(){}\n\nconst Stack = (item, stack) => new _Stack(item, stack)\n\nconst Empty = new _Empty()\n\nconst push = (item, stack) => {\n    return Stack(item, stack)\n}\n\nconst pop = (stack) => {\n   return stack.tail === undefined ?  Stack(Empty) : stack.tail\n}\n\nconst peek = (stack) => {\n    return stack.head\n}\n\nconst empty = () => {\n    return Stack(Empty)\n}\n\nconst isEmpty = (stack) => {\n    return (stack.head === undefined || stack.head instanceof _Empty)\n}\n\nconst reverse = (stack) => {\n    let reverseStack = empty()\n\n    while (!isEmpty(stack)) {\n        reverseStack = push(peek(stack), reverseStack)\n        stack = pop(stack)\n    }\n\n    return reverseStack\n}\n\nmodule.exports = {\n    push,\n    pop,\n    peek,\n    empty,\n    isEmpty,\n    reverse\n}","const _Task = function(computation) {\n    this.computation = computation\n}\n\nconst Task = (computation) => new _Task(computation)\n\nconst of = (value) => Task((_, resolve) => resolve(value))\n\nconst rejected = (value) => Task((reject) => reject(value))\n\nconst map = (f, task) => Task((reject, resolve) => fork(a => reject(a), b => resolve(f(b)), task))\n\nconst chain = (f, task) => Task((reject, resolve) => fork(a => reject(a), b => fork(reject, resolve, f(b)), task))\n\nconst ap = (taskf, taskx) => Task((reject, resolve) => {\n    let value\n    let valueSet = false\n    let func\n    let funcSet = false\n\n    const resolver = (setter) => (x) => {\n        setter(x)\n        if (valueSet === true && funcSet === true){\n            return resolve(func(value))\n        }\n    }\n\n    const statex = fork(reject, resolver((x) => {\n        value = x\n        valueSet = true\n    }), taskx)\n\n    const statef = fork(reject, resolver((f) => {\n        func = f\n        funcSet = true\n    }), taskf)\n\n    return [statex, statef]\n})\n\nconst concat = (concattask, task) => Task((reject, resolve) => {\n    const state = fork(reject, resolve, task)\n    const stateconcat = fork(reject, resolve, taskconcat)\n\n    return [state, stateconcat]\n})\n\nconst empty = () => Task(() => {})\n\nconst fold = (f, g, task) => Task((_, resolve) => fork(a => resolve(f(a)), b => resolve(g(b))), task)\n\nconst cata = (pattern, task) => fold(pattern.rejected, pattern.resolved, task)\n\nconst bimap = (f, g) => Task((reject, resolve) => fork(a => reject(f(a)), b => resolve(g(b))), task)\n\nconst fork = (reject, resolve, task) => {\n    console.log(task.computation)\n    return task.computation(reject, resolve)\n}\n\nmodule.exports = {\n    Task,\n    of,\n    rejected,\n    map,\n    chain,\n    ap,\n    concat,\n    empty,\n    fold,\n    cata,\n    bimap,\n    fork\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}